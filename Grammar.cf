WFile. WFile ::= [Import] [WLibraryElement] WProgram;
separator Import "";
separator WLibraryElement "";

Import. Import ::= "import - TODO";
WLibraryElement. WLibraryElement ::= WClassDeclaration;

WProgram. WProgram ::= "program" Ident "{" [WStatement] "}";
terminator WStatement "";

WClassDeclaration. WClassDeclaration ::=
    "class" Ident WSuperclassDeclaration "{"
        [WVariableDeclaration]
        [WMethodDeclaration]
    "}";
separator WVariableDeclaration "";
separator WMethodDeclaration "";

WSuperclass. WSuperclassDeclaration ::= "inherits" Ident;
WNoSuperclass. WSuperclassDeclaration ::= ;

WMethodDeclaration. WMethodDeclaration ::=
    "method" WSelector "(" [Ident] ")" MethodBody;
separator Ident ",";

WSelector. WSelector ::= Ident;
WAddOpSelector. WSelector ::= OpAdd;
WOrOpSelector. WSelector ::= OpOr;
WAndOpSelector. WSelector ::= OpAnd;
WMultOpSelector. WSelector ::= OpMult;
WEqOpSelector. WSelector ::= OpEq;
WCmpOpSelector. WSelector ::= OpCmp;
WPowerOpSelector. WSelector ::= OpPower;
WUnaryOpSelector. WSelector ::= OpUnary;
WPostfixOpSelector. WSelector ::= OpPostfix;

ImplementedByBlock. MethodBody ::= "{" [WStatement] "}";
ImplementedByExpression. MethodBody ::= "=" WExpression;
ImplementedNatively. MethodBody ::= "native";

TopLevelExpression. WStatement ::= WExpression;
VarDeclaration. WStatement ::= WVariableDeclaration;
WReturn. WStatement ::= "return" WExpression;
WThrow. WStatement ::= "throw" WExpression;
WAssignment. WStatement ::= Ident "=" WExpression;

WVariableDeclaration. WVariableDeclaration ::= WVariableType Ident "=" WExpression;
Var. WVariableType ::= "var";
Const. WVariableType ::= "const";

SingleExpression. WBlockOrExpression ::= WStatement;
Block. WBlockOrExpression ::= "{" [WStatement] "}";

WTry. WExpression ::= "try" WBlockOrExpression [WCatch] WThenAlways;
separator WCatch "";

WCatch. WCatch ::= "catch" Ident ExceptionType WBlockOrExpression;
WThenAlwaysProvided. WThenAlways ::= "then" "always" WBlockOrExpression;
WNoThenAlways. WThenAlways ::= ;

ProvidedExceptionType. ExceptionType ::= ":" Ident;
DefaultExceptionType. ExceptionType ::= ;

rules OpOr ::= "||" | "or";
WOrExpression. WExpression1 ::= WExpression OpOr WExpression1;
rules OpAnd ::= "&&" | "and";
WAndExpression. WExpression1 ::= WExpression1 OpAnd WExpression2;
rules OpEq ::= "==" | "!=" | "===" | "!==";
WEqExpression. WExpression2 ::= WExpression2 OpEq WExpression3;
rules OpCmp ::= ">=" | "<=" | ">" | "<";
WCmpExpression. WExpression3 ::= WExpression3 OpCmp WExpression4;
rules OpAdd ::= "+" | "-";
WAddExpression. WExpression4 ::= WExpression4 OpAdd WExpression5;
rules OpMult ::= "*" | "/" | "%";
WMultExpression. WExpression5 ::= WExpression5 OpMult WExpression6;
rules OpPower ::= "**";
WPowerExpression. WExpression6 ::= WExpression7 OpPower WExpression6;
rules OpUnary ::= "not" | "!" | "-" | "+";
WUnaryExpression. WExpression7 ::= OpUnary WExpression8;
rules OpPostfix ::= "++" | "--";
WPostfixExpression. WExpression8 ::= WExpression9 OpPostfix;

WMessageSend. WExpression9 ::=
    WExpression9 "." Ident "(" [WExpression] ")";
separator WExpression ",";

WClosure . WExpression10 ::= "{" WClosureParameters [WStatement] "}";
WNoParameters . WClosureParameters ::=;
WWithParameters . WClosureParameters ::= [Ident] "=>";

WIf . WExpression10 ::= "if" "(" WExpression ")" WBlockOrExpression WElse;
WNoElse . WElse ::= ;
WElse . WElse ::= "else" WBlockOrExpression;

WObjectLiteral. WExpression10 ::=
    "object" Ident WSuperclassDeclaration "{"
        [WVariableDeclaration]
        [WMethodDeclaration]
    "}";

WNew. WExpression10 ::= "new" Ident "(" [WNewParameter] ")";
WNewParameter. WNewParameter ::= Ident "=" WExpression;
separator WNewParameter ",";

WNumberLiteral. WExpression10 ::= Integer;
WNullLiteral. WExpression10 ::= "null";
WLiteralTrue. WExpression10 ::= "true";
WLiteralFalse. WExpression10 ::= "false";
WSelf. WExpression10 ::= "self";
WStringLiteral. WExpression10 ::= String;
WVariable. WExpression10 ::= Ident;

comment "//" ;
comment "/*" "*/" ;

coercions WExpression 10;