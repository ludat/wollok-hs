{-# OPTIONS_GHC -w #-}
-- Haskell module generated by the BNF converter

module Parser.SkelGrammar where

import qualified Parser.AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Parser.AbsGrammar.Ident -> Result
transIdent x = case x of
  Parser.AbsGrammar.Ident string -> failure x
transWFile :: Parser.AbsGrammar.WFile -> Result
transWFile x = case x of
  Parser.AbsGrammar.WFile imports wlibraryelements wprogram -> failure x
transImport :: Parser.AbsGrammar.Import -> Result
transImport x = case x of
  Parser.AbsGrammar.Import -> failure x
transWLibraryElement :: Parser.AbsGrammar.WLibraryElement -> Result
transWLibraryElement x = case x of
  Parser.AbsGrammar.WLibraryElement wclassdeclaration -> failure x
transWProgram :: Parser.AbsGrammar.WProgram -> Result
transWProgram x = case x of
  Parser.AbsGrammar.WProgram ident wstatements -> failure x
transWClassDeclaration :: Parser.AbsGrammar.WClassDeclaration -> Result
transWClassDeclaration x = case x of
  Parser.AbsGrammar.WClassDeclaration ident wsuperclassdeclaration wvariabledeclarations wmethoddeclarations -> failure x
transWSuperclassDeclaration :: Parser.AbsGrammar.WSuperclassDeclaration -> Result
transWSuperclassDeclaration x = case x of
  Parser.AbsGrammar.WSuperclass ident -> failure x
  Parser.AbsGrammar.WNoSuperclass -> failure x
transWMethodDeclaration :: Parser.AbsGrammar.WMethodDeclaration -> Result
transWMethodDeclaration x = case x of
  Parser.AbsGrammar.WMethodDeclaration wselector idents methodbody -> failure x
transWSelector :: Parser.AbsGrammar.WSelector -> Result
transWSelector x = case x of
  Parser.AbsGrammar.WSelector ident -> failure x
  Parser.AbsGrammar.WAddOpSelector opadd -> failure x
  Parser.AbsGrammar.WOrOpSelector opor -> failure x
  Parser.AbsGrammar.WAndOpSelector opand -> failure x
  Parser.AbsGrammar.WMultOpSelector opmult -> failure x
  Parser.AbsGrammar.WEqOpSelector opeq -> failure x
  Parser.AbsGrammar.WCmpOpSelector opcmp -> failure x
  Parser.AbsGrammar.WPowerOpSelector oppower -> failure x
  Parser.AbsGrammar.WUnaryOpSelector opunary -> failure x
  Parser.AbsGrammar.WPostfixOpSelector oppostfix -> failure x
transMethodBody :: Parser.AbsGrammar.MethodBody -> Result
transMethodBody x = case x of
  Parser.AbsGrammar.ImplementedByBlock wstatements -> failure x
  Parser.AbsGrammar.ImplementedByExpression wexpression -> failure x
  Parser.AbsGrammar.ImplementedNatively -> failure x
transWStatement :: Parser.AbsGrammar.WStatement -> Result
transWStatement x = case x of
  Parser.AbsGrammar.TopLevelExpression wexpression -> failure x
  Parser.AbsGrammar.VarDeclaration wvariabledeclaration -> failure x
  Parser.AbsGrammar.WReturn wexpression -> failure x
  Parser.AbsGrammar.WThrow wexpression -> failure x
  Parser.AbsGrammar.WAssignment ident wexpression -> failure x
transWVariableDeclaration :: Parser.AbsGrammar.WVariableDeclaration -> Result
transWVariableDeclaration x = case x of
  Parser.AbsGrammar.WVariableDeclaration wvariabletype ident wexpression -> failure x
transWVariableType :: Parser.AbsGrammar.WVariableType -> Result
transWVariableType x = case x of
  Parser.AbsGrammar.Var -> failure x
  Parser.AbsGrammar.Const -> failure x
transWBlockOrExpression :: Parser.AbsGrammar.WBlockOrExpression -> Result
transWBlockOrExpression x = case x of
  Parser.AbsGrammar.SingleExpression wstatement -> failure x
  Parser.AbsGrammar.Block wstatements -> failure x
transWExpression :: Parser.AbsGrammar.WExpression -> Result
transWExpression x = case x of
  Parser.AbsGrammar.WTry wblockorexpression wcatchs wthenalways -> failure x
  Parser.AbsGrammar.WOrExpression wexpression1 opor wexpression2 -> failure x
  Parser.AbsGrammar.WAndExpression wexpression1 opand wexpression2 -> failure x
  Parser.AbsGrammar.WEqExpression wexpression1 opeq wexpression2 -> failure x
  Parser.AbsGrammar.WCmpExpression wexpression1 opcmp wexpression2 -> failure x
  Parser.AbsGrammar.WAddExpression wexpression1 opadd wexpression2 -> failure x
  Parser.AbsGrammar.WMultExpression wexpression1 opmult wexpression2 -> failure x
  Parser.AbsGrammar.WPowerExpression wexpression1 oppower wexpression2 -> failure x
  Parser.AbsGrammar.WUnaryExpression opunary wexpression -> failure x
  Parser.AbsGrammar.WPostfixExpression wexpression oppostfix -> failure x
  Parser.AbsGrammar.WMessageSend wexpression ident wexpressions -> failure x
  Parser.AbsGrammar.WClosure wclosureparameters wstatements -> failure x
  Parser.AbsGrammar.WIf wexpression wblockorexpression welse -> failure x
  Parser.AbsGrammar.WObjectLiteral ident wsuperclassdeclaration wvariabledeclarations wmethoddeclarations -> failure x
  Parser.AbsGrammar.WNumberLiteral integer -> failure x
  Parser.AbsGrammar.WNullLiteral -> failure x
  Parser.AbsGrammar.WLiteralTrue -> failure x
  Parser.AbsGrammar.WLiteralFalse -> failure x
  Parser.AbsGrammar.WSelf -> failure x
  Parser.AbsGrammar.WStringLiteral string -> failure x
  Parser.AbsGrammar.WVariable ident -> failure x
transWCatch :: Parser.AbsGrammar.WCatch -> Result
transWCatch x = case x of
  Parser.AbsGrammar.WCatch ident exceptiontype wblockorexpression -> failure x
transWThenAlways :: Parser.AbsGrammar.WThenAlways -> Result
transWThenAlways x = case x of
  Parser.AbsGrammar.WThenAlwaysProvided wblockorexpression -> failure x
  Parser.AbsGrammar.WNoThenAlways -> failure x
transExceptionType :: Parser.AbsGrammar.ExceptionType -> Result
transExceptionType x = case x of
  Parser.AbsGrammar.ProvidedExceptionType ident -> failure x
  Parser.AbsGrammar.DefaultExceptionType -> failure x
transOpOr :: Parser.AbsGrammar.OpOr -> Result
transOpOr x = case x of
  Parser.AbsGrammar.OpOr1 -> failure x
  Parser.AbsGrammar.OpOr_or -> failure x
transOpAnd :: Parser.AbsGrammar.OpAnd -> Result
transOpAnd x = case x of
  Parser.AbsGrammar.OpAnd1 -> failure x
  Parser.AbsGrammar.OpAnd_and -> failure x
transOpEq :: Parser.AbsGrammar.OpEq -> Result
transOpEq x = case x of
  Parser.AbsGrammar.OpEq1 -> failure x
  Parser.AbsGrammar.OpEq2 -> failure x
  Parser.AbsGrammar.OpEq3 -> failure x
  Parser.AbsGrammar.OpEq4 -> failure x
transOpCmp :: Parser.AbsGrammar.OpCmp -> Result
transOpCmp x = case x of
  Parser.AbsGrammar.OpCmp1 -> failure x
  Parser.AbsGrammar.OpCmp2 -> failure x
  Parser.AbsGrammar.OpCmp3 -> failure x
  Parser.AbsGrammar.OpCmp4 -> failure x
transOpAdd :: Parser.AbsGrammar.OpAdd -> Result
transOpAdd x = case x of
  Parser.AbsGrammar.OpAdd1 -> failure x
  Parser.AbsGrammar.OpAdd2 -> failure x
transOpMult :: Parser.AbsGrammar.OpMult -> Result
transOpMult x = case x of
  Parser.AbsGrammar.OpMult1 -> failure x
  Parser.AbsGrammar.OpMult2 -> failure x
  Parser.AbsGrammar.OpMult3 -> failure x
transOpPower :: Parser.AbsGrammar.OpPower -> Result
transOpPower x = case x of
  Parser.AbsGrammar.OpPower1 -> failure x
transOpUnary :: Parser.AbsGrammar.OpUnary -> Result
transOpUnary x = case x of
  Parser.AbsGrammar.OpUnary_not -> failure x
  Parser.AbsGrammar.OpUnary1 -> failure x
  Parser.AbsGrammar.OpUnary2 -> failure x
  Parser.AbsGrammar.OpUnary3 -> failure x
transOpPostfix :: Parser.AbsGrammar.OpPostfix -> Result
transOpPostfix x = case x of
  Parser.AbsGrammar.OpPostfix1 -> failure x
  Parser.AbsGrammar.OpPostfix2 -> failure x
transWClosureParameters :: Parser.AbsGrammar.WClosureParameters -> Result
transWClosureParameters x = case x of
  Parser.AbsGrammar.WNoParameters -> failure x
  Parser.AbsGrammar.WWithParameters idents -> failure x
transWElse :: Parser.AbsGrammar.WElse -> Result
transWElse x = case x of
  Parser.AbsGrammar.WNoElse -> failure x
  Parser.AbsGrammar.WElse wblockorexpression -> failure x

