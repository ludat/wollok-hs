-- Haskell module generated by the BNF converter

module Parser.SkelGrammar where

import qualified Parser.AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: Parser.AbsGrammar.Exp -> Result
transExp x = case x of
  Parser.AbsGrammar.EAdd exp1 exp2 -> failure x
  Parser.AbsGrammar.ESub exp1 exp2 -> failure x
  Parser.AbsGrammar.EMul exp1 exp2 -> failure x
  Parser.AbsGrammar.EDiv exp1 exp2 -> failure x
  Parser.AbsGrammar.EInt integer -> failure x

